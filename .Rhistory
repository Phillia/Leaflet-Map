lhc.draws.transformed %>% head()
# Set up Parallel Processing
# require(doParallel)
# nworkers <- detectCores()
# cl <- makePSOCKcluster(nworkers)
# clusterSetRNGStream(cl, c(1,2,3,4,5,6,7,8))
# registerDoParallel(cl)
#
# # Split Into Chunks
# d = 1:dim(lhc.draws.transformed)[1]
# chunks = split(d,ceiling(seq_along(d)/100))
if (!file.exists("./psa-toy.Rdata"))
{
PSA <- foreach (i = 1:dim(lhc.draws.transformed)[1],.combine=rbind) %do%
{
cat(i)
# Standard of Care
params = lhc.draws.transformed[i,]
params$r_a = inst_rate(params$r_a, 5)
params$r_b = inst_rate(params$r_b, 5)
params['rr_t'] = 1
params['r_a'] <- params['r_a']*params['rr_t']
params['c_t']  <- 0
A <- as.data.frame(expected(params))
params.A <- params
names(params.A) = paste0(names(params.A),".A")
# Treatment
params = lhc.draws.transformed[i,]
params$r_a = inst_rate(params$r_a, 5)
params$r_b = inst_rate(params$r_b, 5)
params['r_a'] <- params['r_a']*params['rr_t']
B <- as.data.frame(expected(params))
params.B <- params
names(params.B) = paste0(names(params.B),".B")
out <- unlist(c(params.A,
params.B,
cost.A = A["cost",] , qaly.A = A["qaly",] , Strategy.A = lambda*A["qaly",] - A["cost",],
cost.B = B["cost",] , qaly.B = B["qaly",] , Strategy.B = lambda*B["qaly",] - B["cost",]))
out
}
PSA <- PSA %>% tbl_df()
save(PSA,file="./psa-toy.Rdata")
} else
{
load("./psa-toy.Rdata")
}
load("./psa-toy.Rdata")
select <- dplyr::select
mutate <- dplyr::mutate
Sim <- PSA %>% tbl_df()
Sim <- PSA %>% mutate(iteration=row_number()) %>% select(iteration,cost.A,qaly.A,cost.B,qaly.B,contains(".B"))
head(Sim)
PSA %>% mutate(iteration=row_number()) %>% select(iteration,cost.A,qaly.A,cost.B,qaly.B,contains(".B"))
Sim %>% select(-iteration,-cost.A,-cost.B,-qaly.A,-qaly.B,-Strategy.B,-disc_rate.B)
PSA %>% mutate(iteration=row_number())
PSA %>% mutate(iteration=row_number()) %>% select(iteration,cost.A,qaly.A,cost.B,qaly.B,contains(".B"))
names(SIm)
names(Sim)
Sim <- PSA %>% mutate(iteration=row_number()) %>% select(cost.A,qaly.A,cost.B,qaly.B,contains(".B"))
library(dplyr)
load("/Users/zilu/Downloads/network_plans.Rdata")
load("/Users/zilu/Downloads/network_providers.Rdata")
load("/Users/zilu/Downloads/providers.Rdata")
sa <- network_plans %>% filter(hios_id %in% test)
sb <- sa %>% left_join(network_providers,by="network_id")
sc <- sb %>% left_join(providers,by="npi")
planlist <- read.csv("/Users/zilu/Desktop/MA-data/datasets/source/CPSC_Contract_Info_2017_07.csv",stringsAsFactors=F) %>%
filter(!(Organization.Type %in% c("Employer/Union Only Direct Contract PDP",
"Medicare Prescription Drug Plan",
"Pilot")))
planlist$Plan.ID <- sprintf("%03d",planlist$Plan.ID)
planlist <- planlist %>% mutate(id=paste0(Contract.ID,"-",Plan.ID)) %>% select(id,Plan.Type)
network_plans <- network_plans %>% mutate(id=substr(hios_id,1,nchar(hios_id)-2))
cb <- planlist %>% left_join(network_plans,by="id") %>%
select(id,Plan.Type,network_id) %>% unique() #drop multiple segment id plans
cb$eg <- substr(cb$id,7,7)=="8"
um <- cb[which(is.na(cb$network_id)),]
length(which(is.na(cb$network_id)))/nrow(cb) #unmatched
with(um,table(Plan.Type,eg))
with(cb,table(Plan.Type,eg))
um
length(unique(um$id))
cb2 <- cb %>% filter(!is.na(network_id)) %>% left_join(network_providers,by="network_id")
nrow(cb2 %>% filter(is.na(npi)) %>% select(network_id) %>% unique()) / length(unique(cb$network_id))
cc <- cb2 %>% filter(is.na(npi))
View(cc)
nrow(cc)/nrow(cb) #unmatched plans
length(unique(cc$network_id))/length(unique(cb$network_id))
nrow(cc)/nrow(cb) #unmatched plans
length(unique(cc$network_id))/length(unique(cb$network_id))
any(network_providers$network_id==101664)
any(network_plans$network_id==101664)
load("/Users/zilu/Downloads/network_providers_marketplace.Rdata")
any(network_providers_marketplace$network_id==101664)
setwd("~/Downloads")
library(plyr)
library(dplyr)
library(reshape2)
load("giant.rda")
prem_sg1 <- read.csv("CCIIO_2017_individualplanrapremiums.csv",stringsAsFactors=FALSE) %>%
select(Age=age,ratingarea,individualrate)
prem_sg2 <- read.csv("CCIIO_2017_indwdepplanrapremiums.csv",stringsAsFactors=FALSE) %>%
select(ratingarea,primarysubscriberandonedependent,primarysubscriberandtwodependents,primarysubscriberandthreeormoredependents)
prem_cp1 <- read.csv("CCIIO_2017_coupleplanrapremiums.csv",stringsAsFactors=FALSE) %>%
select(ratingarea,couple)
prem_cp2 <- read.csv("CCIIO_2017_couplewdepplanrapremiums.csv",stringsAsFactors=FALSE) %>%
select(ratingarea,coupleandonedependent,coupleandtwodependents,coupleandthreeormoredependents)
##2.single w/ dependent
acs_2 <- dt %>% filter(num_p==1 & num_d>0) %>%
left_join(prem_sg2,by="ratingarea") %>%
mutate(prem=ifelse(num_d==1,primarysubscriberandonedependent,ifelse(num_d==2,primarysubscriberandtwodependents,primarysubscriberandthreeormoredependents)),
exempt=as.integer(hiuinc<0.0816*prem*12),exempt=ifelse(hiufpl<4,0,exempt))
table(acs_2$exempt)
##2.single w/ dependent
acs_2 <- dt %>% filter(num_p==1 & num_d>0) %>%
left_join(prem_sg2,by="ratingarea") %>%
mutate(prem=ifelse(num_d==1,primarysubscriberandonedependent,ifelse(num_d==2,primarysubscriberandtwodependents,primarysubscriberandthreeormoredependents)),
exempt=as.integer(0.0816*hiuinc<prem*12),exempt=ifelse(hiufpl<4,0,exempt))
table(acs_2$exempt)
dd <- acs_2 %>% filter(0.0816*hiuinc<prem*12)
summary(dd$hiuinc)
summary(dd$hiufpl)
##1.single no dependent
acs_1 <- dt %>% filter(num_p==1 & num_d==0) %>%
mutate(Age=ifelse(age=="less than 1 year old",0,as.integer(age)),
Age=ifelse(Age>20,as.character(age),"0-20")) %>%
left_join(prem_sg1,by=c("ratingarea","Age")) %>%
mutate(exempt=as.integer(0.0816*hiuinc<individualrate*12),exempt=ifelse(hiufpl<4,0,exempt)) %>%
select(puma,perwt,age,num_p,num_d,hiuinc,hiufpl,uninsured,nongroup,exempt)
table(acs_1$exempt)
acs_3 <- dt %>% filter(num_p>1 & num_d==0) %>%
left_join(prem_cp1,by="ratingarea") %>%
mutate(exempt=as.integer(0.0816*hiuinc<couple*12),exempt=ifelse(hiufpl<4,0,exempt))
table(acs_3$exempt)
dc <- acs_3 %>% filter((0.0816*hiuinc<couple*12)
dc <- acs_3 %>% filter(0.0816*hiuinc<couple*12)
summary(dc$hiufpl)
##4.couple w/ dependent
acs_4 <- dt %>% filter(num_p>1 & num_d>0) %>%
left_join(prem_cp2,by="ratingarea") %>%
mutate(prem=ifelse(num_d==1,coupleandonedependent,ifelse(num_d==2,coupleandtwodependents,coupleandthreeormoredependents)),
exempt=as.integer(0.0816*hiuinc<prem*12),exempt=ifelse(hiufpl<4,0,exempt)) %>%
select(puma,perwt,age,num_p,num_d,hiuinc,hiufpl,uninsured,nongroup,exempt)
table(acs_4$exempt)
View(dc)
dc$inc <- 0.0816*dc$hiuinc
dc$cost <- 12*couple
dc$cost <- 12*dc$couple
View(prem_cp1)
View(prem_cp2)
View(prem_sg1)
View(prem_sg2)
1200/0.0816
174*12
174*12/0.0816
34*12
34*12/-.0816
34*12/.0816
12060*0.0816
12060*0.0816/12
34.1/0.0816
34.1*12/0.0816
library("weights")
setwd("/Users/zilu/Desktop/leaflet-map")
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
rm(list=ls())
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
rm(list=ls())
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
# load("hhi.drg.full2.rda")
# drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
# #fill in 0 cell
# library(data.table)
# cons <- data.table(drg)
# cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
# drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
#
# add_metrics <- function(target,source,newname) {
#   source <- source %>% filter(newvar==newname)
#   target$new <-  source$hhi[order(match(source$rating_area,call))]
#   names(target)[names(target)=="new"] <- newname
#   return(target)
# }
#
# for(i in unique(drg$newvar)) {
#   rating_area2 <- add_metrics(rating_area2,drg,i)
# }
raw <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
#data for plot
prem <- raw %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem)[names(prem)=="X0.20"] <- "X20"
add_metrics <- function(target,source,varname) {
names(source)[names(source)==varname] <- "inc"
target$inc <-  source$inc[order(match(source$rating_area,call))]
names(target)[names(target)=="inc"] <- paste0("Age",varname)
return(target)
}
grp <- names(prem)[names(prem)!="rating_area"]
for(i in grp) {
rating_area2 <- add_metrics(rating_area2,prem,i)
}
#data for table
tb <- melt(raw) %>% mutate(
State=statecode,
Age=gsub("X","",variable),
Rating.Area=substr(ratingarea,3,4),
Exempt.Income=value
) %>% select(State,Age,Rating.Area,Exempt.Income)
comp1 <- rating_area2
sv1 <- prem
rating_area <- readOGR(dsn="./ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
# load("hhi.drg.full2.rda")
# drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
# #fill in 0 cell
# library(data.table)
# cons <- data.table(drg)
# cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
# drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
#
# add_metrics <- function(target,source,newname) {
#   source <- source %>% filter(newvar==newname)
#   target$new <-  source$hhi[order(match(source$rating_area,call))]
#   names(target)[names(target)=="new"] <- newname
#   return(target)
# }
#
# for(i in unique(drg$newvar)) {
#   rating_area2 <- add_metrics(rating_area2,drg,i)
# }
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(prem$statecode))
#data for plot
prem <- prem %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem) <- gsub("X","Age",names(prem))
varlist <- names(prem)[grepl("Age",names(prem))]
rating_area2$name <- as.character(rating_area2$name)
rating_area2@data <- rating_area2@data %>% left_join(prem,by=c("name"="rating_area"))
comp2 <- rating_area2
sv2 <- prem
View(sv1)
View(sv2)
mm1 <- comp1@data
mm2 <- comp2@data
View(mm1)
View(mm2)
any(mm1[,7]!=mm2[,7])
left <- mm1 %>% filter(!is.na(AgeX20))
right <- mm2 %>% filter(!is.na(Age0.20))
any(left[,7]!=right[,7])
call
match(prem$rating_area,call)
raw <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
#data for plot
prem <- raw %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem)[names(prem)=="X0.20"] <- "X20"
match(prem$rating_area,call)
View(prem)
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
raw <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#data for plot
prem <- raw %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem)[names(prem)=="X0.20"] <- "X20"
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
call
match(prem$rating_area,call)
names(raw)
prem <- raw %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode)
View(prem)
prem <- raw %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
load("/Users/zilu/Box Sync/Active/Leaflet/drg-data-for-zilu/hhi.drg.full2.rda")
View(drg)
