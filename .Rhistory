shiny::runApp()
runApp()
runApp()
table(hhi.hix$year)
hhi.hix <- hhi.drg.hix %>% filter(!(state %in% c("PR","GU")))
table(hhi.hix$year)
year.hix <- unique(hhi.hix$year)
hhi.hix <- hhi.drg.hix %>% filter(!(state %in% c("PR","GU"))) %>% filter(year==2015)
hhi.hix$hhi[order(match(hhi.hix$ratingarea,call))]
dt <- list(
"hhi.hix" = hhi.hix,
"hhi.mms" = hhi.mms
)
dt["hhi.mms"]
runApp()
dt["hhi.hix"]
dt["hhi.mms"]
str(dt["hhi.mms"])
data.frame(dt["hhi.mms"])
runApp()
runApp()
rating_area2["ddd"] <- rep(1,499)
rep(1,499)
rating_area2$ddd <- rep(1,499)
length(c(1:499))
rating_area2$ddd <- c(1:499)
hhi.hix$hhi[order(match(hhi.hix$ratingarea,call))]
length(hhi.hix$hhi[order(match(hhi.hix$ratingarea,call))])
rating_area2$hhi.hix <- hhi.hix$hhi[order(match(hhi.hix$ratingarea,call))]
rating_area2$hhi.mms <- hhi.mms$hhi[order(match(hhi.mms$ratingarea,call))]
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
rating_area2["ddd"] <- rep(1,499)
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
names( rating_area2)
rm(dt)
add_metrics <- function(target,source,newname) {
target$new <-  source$hhi[order(match(source$ratingarea,call))]
names(target)[names(target)=="new"] <- newname
}
ck <- add_metrics(rating_area2,hhi.hix,"ddd")
names(ck)
ck <- add_metrics(rating_area2,hhi.hix,"ddd")
add_metrics <- function(target,source,newname) {
target$new <-  source$hhi[order(match(source$ratingarea,call))]
names(target)[names(target)=="new"] <- newname
return(target)
}
ck <- add_metrics(rating_area2,hhi.hix,"ddd")
names(ck)
View(hhi.hix)
View(hhi.mms)
drg <- rbind(hhi.drg.hix,hhi.drg.mms)
str(hhi.drg.hix)
str(hhi.drg.mms)
hhi.drg.mms$year <- as.numeric(hhi.drg.mms$year)
drg <- rbind(hhi.drg.hix,hhi.drg.mms)
View(drg)
rm(list=ls())
setwd("/Users/zilu/Box Sync/Active/Leaflet/drg-data-for-zilu/")
load("./hhi.drg.hix2.rda")
load("./hhi.drg.mms2.rda")
hhi.drg.mms$year <- as.numeric(hhi.drg.mms$year)
drg <- rbind(hhi.drg.hix,hhi.drg.mms)
save(drg,file="./hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU")))
with(drg,table(market,year))
runApp('~/Desktop/leaflet-map')
runApp('~/Desktop/leaflet-map')
test <- drg %>% filter(market=="medicaid_0",year==2013)
rating_area2$hhi.hix <- test$hhi[order(match(test$ratingarea,call))]
test$ratingarea
call <- as.character(rating_area2$name)
rating_area2$hhi.hix <- test$hhi[order(match(test$ratingarea,call))]
table(drg$market)
table(drg$year)
library(reshape2)
melt(with(drg,table(market,year)))
library(dplyr)
cons <- melt(with(drg,table(market,year))) %>% select(-value)
View(cons)
melt(with(drg,table(market,year)))
cons <- melt(with(drg,table(market,year))) %>% filter(value>0) %>% select(-value)
View(cons)
cons <- melt(with(drg,table(market,year))) %>% filter(value>0) %>% select(-value) %>% mutate(nname=gsub("_0",paste0("_",year),market))
View(cons)
ck <-  melt(with(drg,table(market,year))) %>% filter(value>0) %>% select(-value) %>% mutate(nname=gsub("_0",paste0("_",year),market)) %>%
full_join(drg,by=c("market","year"))
View(ck)
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
View(drg)
drg <- melt(with(drg,table(market,year))) %>% filter(value>0) %>% select(-value) %>% mutate(nname=paste0(market,"_",year)) %>%
full_join(drg,by=c("market","year"))
View(ck)
View(drg)
call
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
with(drg,table(market,year))
cons <- melt(with(drg,table(market,year))) %>% filter(value>0) %>% select(-value)
cons
cbind(cons,call)
df <- data.frame(var1=c('a', 'b', 'c'), var2=c('d', 'e', 'f'), freq=1:3)
library(data.table)
dt <- data.table(df)
dt.expanded <- dt[ ,list(freq=rep(1,freq)),by=c("var1","var2")]
dt.expanded[ ,freq := NULL]
dt.expanded
dt <- data.table(df)
dt.expanded <- dt[ ,list(freq=rep(1,freq)),by=c("var1","var2")]
dt.expanded
cbind(cons,list(call))
data.frame(market=cons$market,year=cons$year,state=list(call))
data.frame(market=cons$market,year=cons$year,state=call)
data.frame(market=cons$market,year=cons$year,state=list(call))
list(call)
data.frame(market=cons$market,year=cons$year,state=1)
data.frame(market=cons$market,year=cons$year,state=I(list(call)))
data.frame(market=cons$market,year=cons$year,state=I(call))
library(data.table)
dt <- data.table(drg)
dt <- dt[ ,list(state=call),by=c("market","year")]
dt[ ,freq := NULL]
dt
data.frame(market=cons$market,year=cons$year,state=I(list(call)))
data.frame(market=cons$market,year=cons$year,state=rep(I(list(call)),499))
data.frame(market=cons$market,year=cons$year,state=rep(list(call),57))
data.frame(market=cons$market,year=cons$year,state=rep(I(list(call)),57))
list(call)
cons$state <- list(call)
View(cons)
dt <- data.table(drg)
dt <- dt[ ,list(state=call),by=c("market","year")]
dt[ ,state := NULL]
dt
dt <- data.table(drg)
dt <- dt[ ,list(state=call),by=c("market","year")]
dt
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
cons <- melt(with(drg,table(market,year))) %>% filter(value>0) %>% select(-value)
library(data.table)
drg <- data.table(drg)
drg <- dt[ ,list(state=call),by=c("market","year")] %>% data.frame()
View(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
library(data.table)
cons <- data.table(drg)
cons <- cons[ ,list(state=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year"))
head(cons)
head(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
library(data.table)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year"))
head(dtg)
head(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
library(data.table)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year","rating_area"))
View(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
head(dtg)
head(drg)
View(cons)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year","rating_area"))
View(drg)
head(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
library(data.table)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
head(drg)
add_metrics <- function(target,source,newname) {
target <- target %>% filter(newvar==newname)
target$new <-  source$hhi[order(match(source$ratingarea,call))]
names(target)[names(target)=="new"] <- newname
return(target)
}
ck <- add_metrics(rating_area2,drg,"hix_2014")
target <- rating_area2
source <- drg
newname <- "hix_2014"
source <- source %>% filter(newvar==newname)
target$new <-  source$hhi[order(match(source$ratingarea,call))]
names(target)[names(target)=="new"] <- newname
return(target)
target
add_metrics <- function(target,source,newname) {
source <- source %>% filter(newvar==newname)
target$new <-  source$hhi[order(match(source$ratingarea,call))]
names(target)[names(target)=="new"] <- newname
return(target)
}
ck <- add_metrics(rating_area2,drg,"hix_2014")
unique(drg$newvar)
for(i in unique(drg$newvar)) {
rating_area2 <- add_metrics(rating_area2,drg,i)
}
names(rating_area2)
unique(drg$newvar)
runApp('~/Desktop/leaflet-map')
names(rating_area2)
source('~/Desktop/leaflet-map/map_data.R', echo=TRUE)
setwd("/Users/zilu/Desktop/leaflet-map")
source('~/Desktop/leaflet-map/map_data.R', echo=TRUE)
cons
source('~/Desktop/leaflet-map/map_data.R', echo=TRUE)
runApp()
rating_area2["hix_2014"]
View(drg)
runApp()
shiny::runApp()
runApp('statemap')
runApp('app_state.R')
View(states)
county_full2$STATEFP[1]
rating_area$name[1]
test <- states %>% select(fips=STATE,val=sample(10:60,51,replace=F))
test <- states %>% select(fips=STATE,val=sample(51,10:63,replace=F))
test <- states %>% select(fips=STATE) %>% mutate(val=sample(51,10:63,replace=F))
sample
test <- states %>% select(fips=STATE) %>% mutate(val=sample(10:63,51,replace=F))
View(test)
call <- county_full2$STATEFP
dim(call)
length(call)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv")
call <- county_full2$STATEFP
View(test)
read.csv()
read.csv
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F)
call <- county_full2$STATEFP
View(test)
View(test)
View(states)
names(test) <- c("statefips","val")
call[1:10]
rating_area2$rate <- test$val[order(match(test$statefips,call))]
order(match(test$statefips,call))
match(test$statefips,call)
match(test$statefips,call)
match(call,test$statefips)
str(call)
call <- as.character(county_full2$STATEFP)
match(call,test$statefips)
str(test)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
match(call,test$statefips)
str(test)
test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("STUSAB","val")
test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
View(test)
call <- as.character(county_full2$STATEFP)
rating_area2$rate <- test$val[order(match(call,test$statefips))]
match(call,test$statefips)
cc <- merge(test,call,by.x="statefips",by.y=STATEFP)
cc <- merge(test,call,by.x="statefips",by.y="STATEFP")
call
call <- data.frame(statefips=call)
cc <- full_join(test,call,by="statefips")
View(cc)
table(call)
length(table(call))
call <- as.character(county_full2$STATEFP)
call <- data.frame(statefips=call,yy=1)
cc <- full_join(test,call,by="statefips")
View(cc)
ck <- cc %>% filter(!complete.cases())
ck <- cc %>% filter(!complete.cases(.))
View(ck)
table(ck$statefips)
match(call,test$statefips
match(call,test$statefips)
##state-level test data
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("STUSAB","val")
test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
test <- cbind(test,data.frame(statefips=c("13","18"),val=c(NA,NA)))
call <- as.character(county_full2$STATEFP)
rating_area2$rate <- test$val[order(match(call,test$statefips))]
match(call,test$statefips)
order(match(call,test$statefips))
test$val[order(match(call,test$statefips))]
county_full2$rate <- test$val[order(match(call,test$statefips))]
call <- as.character(rating_area2$name) %>% substr(1,2)
call[1]
names(test) <- c("state","val")
test <- cbind(test,data.frame(state=c("IN","GA"),val=c(NA,NA)))
call <- as.character(rating_area2$name) %>% substr(1,2)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","val")
#names(test) <- c("STUSAB","val")
#test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
test <- cbind(test,data.frame(state=c("IN","GA"),val=c(NA,NA)))
call <- as.character(rating_area2$name) %>% substr(1,2)
View(test)
test <- rbind(test,data.frame(state=c("IN","GA"),val=c(NA,NA)))
View(test)
match(call,test$statefips)
match(call,test$state)
county_full2$rate <- test$val[order(match(call,test$state))]
rating_area2$rate <- test$val[order(match(call,test$state))]
runApp('app_state.R')
runApp('app_state.R')
rating_area2$rate
order(match(call,test$state))
order(match(test$state,call))
call[1:10]
test$state[1:10]
pair <- order(match(test$state,call))
pair
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","val")
rating_area2$state <- as.character(rating_area2$name) %>% substr(1,2)
new <- merge(rating_area2,test,by="state")
new$val
##state-level test data
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","val")
rating_area2$state <- as.character(rating_area2$name) %>% substr(1,2)
rating_area2 <- merge(rating_area2,test,by="state")
runApp('app_state.R')
rating_area2$state
rating_area2$name
rating_area2$val
runApp('app_state.R')
View(test)
tn <- rating_area2[rating_area2$state=="TN"]
tn <- rating_area2[rating_area2$state=="TN",]
tn$state
tn$name
tn$val
runApp('app_state.R')
library(shiny); runApp('app_state.R')
runApp('app_state.R')
##3.states file
county_full <- readOGR(dsn="./cb_2016_us_state_500k/cb_2016_us_state_500k.shp",
layer = "cb_2016_us_state_500k",verbose = FALSE)
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
county_full2 <- trans(county_full,type="state")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
##3.states file
county_full <- readOGR(dsn="./cb_2016_us_state_500k/cb_2016_us_state_500k.shp",
layer = "cb_2016_us_state_500k",verbose = FALSE)
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
leaflet() %>%
addTiles() %>%
leaflet() %>%
addTiles()
runApp('app_state.R')
leaflet(data=dtplot()$ct,options = leafletOptions(minZoom = 3.5, maxZoom = 8)) %>%
addTiles()
dtplot
dtplot()
dtplot()
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
library(shiny); runApp('app_state.R')
x()
dtplot()$rt
dtplot()$rt$rate
x()
input$var
runApp('app_state.R')
x()
pall
pall(0.1174527)
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
county_full2$STATEFP
