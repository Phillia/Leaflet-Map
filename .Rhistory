rates <- c(0.1,0.008219178)
rates2 = (- (log ( 1 - rates)*rr) / days)
rates2
p1 <- 1-exp(-30*0.1)
p1
p1 <- 1-exp(-365*0.1)
p1
p1
exp(-365*0.1)
p1 <- 1-exp(-365*0.1)
r <- -log(1-p1)/30
r
rates <- c(r,0.1)
rates2 = (- (log ( 1 - rates)*rr) / days)
rates <- c(0.1,0.5)
rates2 = (- (log ( 1 - rates)*rr) / days)
rates2
rates <- c(0.1,0.1*365/30)
rates2 = (- (log ( 1 - rates)*rr) / days)
rates2
rates
rates <- c(0.01,0.01*365/30)
rates2 = (- (log ( 1 - rates)*rr) / days)
rates2
rates <- c(0.01,0.01*335/30)
rates2
rates2 = (- (log ( 1 - rates)*rr) / days)
rates2
r <- 0.1
r365 <- 0.1
p <- 1-exp(-365*r365)
p
options(digits = 10)
p
r365 <- 0.05
p <- 1-exp(-365*r365)
p
r30 <- -loga(1-p)/30
r30 <- -log(1-p)/30
r30
r365
r30/r365
365/30
r365 <- 0.1/365
p <- 1-exp(-365*r365)
p
r30 <- -log(1-p)/30
r30
r365
r30/r365
365/30
r30
r365 <- 0.1
r365 <- 0.1/365
r365
r30 <- r365*365
r30 <- r365*365/30
r30
r30/30
r30*30
r365*365
library(purrr)
a <- c("A","B","C")
f <- function(x) {c(x,paste0(x,"dfs"))}
f("A")
map(a,f)
map(a,function(x) c(x,paste0(x,"dfs")))
map_chr(a,function(x) c(x,paste0(x,"dfs")))
unlist(map(a,function(x) c(x,paste0(x,"dfs"))))
a <- c("A","B","C")
f <- function(x) {c(x,paste0(x,"dfs"))}
unlist(map(a,function(x) c(x,paste0(x,"dfs"))))
str(a)
setwd("/Users/zilu/Desktop/leaflet-map")
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
rm(list=ls())
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
library(dplyr)
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(as.numeric(STATE) < 60)
call <- as.character(rating_area2$name)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
library(data.table)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
View(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
View(drg)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
drg <- drg %>% select(rating_area,hhi,hhi_n,var=newvar) %>% dcast(rating_area~var)
View(drg)
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
#fill in 0 cell
library(data.table)
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
drg <- drg %>% select(rating_area,hhi,var=newvar) %>% dcast(rating_area~var,value.var="hhi")
View(drg)
names(rating_area2@data )
names(drg)
rating_area2@data <- rating_area2 %>% left_join(drg,by=c("name"="rating_area"))
rating_area2@data <- rating_area2@data %>% left_join(drg,by=c("name"="rating_area"))
library(shiny); runApp('app_hhi.R')
names(drg)
runApp('app_hhi.R')
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
rm(list=ls())
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
# load("hhi.drg.full2.rda")
# drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
# #fill in 0 cell
# library(data.table)
# cons <- data.table(drg)
# cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
# drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
#
# add_metrics <- function(target,source,newname) {
#   source <- source %>% filter(newvar==newname)
#   target$new <-  source$hhi[order(match(source$rating_area,call))]
#   names(target)[names(target)=="new"] <- newname
#   return(target)
# }
#
# for(i in unique(drg$newvar)) {
#   rating_area2 <- add_metrics(rating_area2,drg,i)
# }
raw <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
View(raw)
prem <- raw
names(prem)
names(prem) <- gsub("X","Age",names(prem))
names(prem)
varlist <- names(prem)[grepl("Age",names(prem))]
varlist
prem
View(prem)
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
#data for plot
prem <- prem %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem) <- gsub("X","Age",names(prem))
varlist <- names(prem)[grepl("Age",names(prem))]
prem <- prem %>% select(rating_area,hhi,var=newvar) %>% dcast(rating_area~var,value.var="hhi")
View(prem)
rating_area2@data <- rating_area2@data %>% left_join(prem,by=c("name"="rating_area"))
ck <- rating_area2@data
View(ck)
str(rating_area2@data)
str(rating_area@data)
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
rm(list=ls())
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
# load("hhi.drg.full2.rda")
# drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
# #fill in 0 cell
# library(data.table)
# cons <- data.table(drg)
# cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
# drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
#
# add_metrics <- function(target,source,newname) {
#   source <- source %>% filter(newvar==newname)
#   target$new <-  source$hhi[order(match(source$rating_area,call))]
#   names(target)[names(target)=="new"] <- newname
#   return(target)
# }
#
# for(i in unique(drg$newvar)) {
#   rating_area2 <- add_metrics(rating_area2,drg,i)
# }
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
#data for plot
prem <- prem %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem) <- gsub("X","Age",names(prem))
varlist <- names(prem)[grepl("Age",names(prem))]
rating_area2$name <- as.character(rating_area2$name)
rating_area2@data <- rating_area2@data %>% left_join(prem,by=c("name"="rating_area"))
runApp('app_exempt.R')
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(raw$statecode))
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character")
View(states)
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_hhi.R')
rm(list=ls())
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
#rating_area2$rate <- sample(1:10000,499)
#rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp") #from http://eric.clst.org/Stuff/USGeoJSON
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_counties.html
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
library(dplyr)
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(as.numeric(STATE) < 60)
##add hhi test
# load("hhi1.rda")
# #issues: map does not have PR, GU
# #Idaho only has 6 rating areas now, go back to old data (7 RA)
# test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
# call <- as.character(rating_area2$name)
# #rating_area2$rate <- test$hhi[order(match(test$ratingarea,call))]
# rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
##state-level test data
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","share")
rating_area2$name
rating_area2$id
rating_area2$state <- as.character(rating_area2$name) %>% substr(1,2)
rating_area2 <- left_join(rating_area2,test,by="state")
head(data)
head(test)
head(rating_area2@data)
rating_area2$state <- as.character(rating_area2$name) %>% substr(1,2)
rating_area2@data <- left_join(rating_area2@data ,test,by="state")
runApp('app_state.R')
