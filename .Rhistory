for(i in unique(drg$newvar)) {
rating_area2 <- add_metrics(rating_area2,drg,i)
}
names(rating_area2)
unique(drg$newvar)
runApp('~/Desktop/leaflet-map')
names(rating_area2)
source('~/Desktop/leaflet-map/map_data.R', echo=TRUE)
setwd("/Users/zilu/Desktop/leaflet-map")
source('~/Desktop/leaflet-map/map_data.R', echo=TRUE)
cons
source('~/Desktop/leaflet-map/map_data.R', echo=TRUE)
runApp()
rating_area2["hix_2014"]
View(drg)
runApp()
shiny::runApp()
runApp('statemap')
runApp('app_state.R')
View(states)
county_full2$STATEFP[1]
rating_area$name[1]
test <- states %>% select(fips=STATE,val=sample(10:60,51,replace=F))
test <- states %>% select(fips=STATE,val=sample(51,10:63,replace=F))
test <- states %>% select(fips=STATE) %>% mutate(val=sample(51,10:63,replace=F))
sample
test <- states %>% select(fips=STATE) %>% mutate(val=sample(10:63,51,replace=F))
View(test)
call <- county_full2$STATEFP
dim(call)
length(call)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv")
call <- county_full2$STATEFP
View(test)
read.csv()
read.csv
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F)
call <- county_full2$STATEFP
View(test)
View(test)
View(states)
names(test) <- c("statefips","val")
call[1:10]
rating_area2$rate <- test$val[order(match(test$statefips,call))]
order(match(test$statefips,call))
match(test$statefips,call)
match(test$statefips,call)
match(call,test$statefips)
str(call)
call <- as.character(county_full2$STATEFP)
match(call,test$statefips)
str(test)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
match(call,test$statefips)
str(test)
test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("STUSAB","val")
test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
View(test)
call <- as.character(county_full2$STATEFP)
rating_area2$rate <- test$val[order(match(call,test$statefips))]
match(call,test$statefips)
cc <- merge(test,call,by.x="statefips",by.y=STATEFP)
cc <- merge(test,call,by.x="statefips",by.y="STATEFP")
call
call <- data.frame(statefips=call)
cc <- full_join(test,call,by="statefips")
View(cc)
table(call)
length(table(call))
call <- as.character(county_full2$STATEFP)
call <- data.frame(statefips=call,yy=1)
cc <- full_join(test,call,by="statefips")
View(cc)
ck <- cc %>% filter(!complete.cases())
ck <- cc %>% filter(!complete.cases(.))
View(ck)
table(ck$statefips)
match(call,test$statefips
match(call,test$statefips)
##state-level test data
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("STUSAB","val")
test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
test <- cbind(test,data.frame(statefips=c("13","18"),val=c(NA,NA)))
call <- as.character(county_full2$STATEFP)
rating_area2$rate <- test$val[order(match(call,test$statefips))]
match(call,test$statefips)
order(match(call,test$statefips))
test$val[order(match(call,test$statefips))]
county_full2$rate <- test$val[order(match(call,test$statefips))]
call <- as.character(rating_area2$name) %>% substr(1,2)
call[1]
names(test) <- c("state","val")
test <- cbind(test,data.frame(state=c("IN","GA"),val=c(NA,NA)))
call <- as.character(rating_area2$name) %>% substr(1,2)
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","val")
#names(test) <- c("STUSAB","val")
#test <- test %>% left_join(states,by="STUSAB") %>% select(statefips=STATE,val)
test <- cbind(test,data.frame(state=c("IN","GA"),val=c(NA,NA)))
call <- as.character(rating_area2$name) %>% substr(1,2)
View(test)
test <- rbind(test,data.frame(state=c("IN","GA"),val=c(NA,NA)))
View(test)
match(call,test$statefips)
match(call,test$state)
county_full2$rate <- test$val[order(match(call,test$state))]
rating_area2$rate <- test$val[order(match(call,test$state))]
runApp('app_state.R')
runApp('app_state.R')
rating_area2$rate
order(match(call,test$state))
order(match(test$state,call))
call[1:10]
test$state[1:10]
pair <- order(match(test$state,call))
pair
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","val")
rating_area2$state <- as.character(rating_area2$name) %>% substr(1,2)
new <- merge(rating_area2,test,by="state")
new$val
##state-level test data
test <- read.csv("reinsurance-as-share-of-total-incurred-claims.csv",header=F,stringsAsFactors = F)
names(test) <- c("state","val")
rating_area2$state <- as.character(rating_area2$name) %>% substr(1,2)
rating_area2 <- merge(rating_area2,test,by="state")
runApp('app_state.R')
rating_area2$state
rating_area2$name
rating_area2$val
runApp('app_state.R')
View(test)
tn <- rating_area2[rating_area2$state=="TN"]
tn <- rating_area2[rating_area2$state=="TN",]
tn$state
tn$name
tn$val
runApp('app_state.R')
library(shiny); runApp('app_state.R')
runApp('app_state.R')
##3.states file
county_full <- readOGR(dsn="./cb_2016_us_state_500k/cb_2016_us_state_500k.shp",
layer = "cb_2016_us_state_500k",verbose = FALSE)
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
county_full2 <- trans(county_full,type="state")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
##3.states file
county_full <- readOGR(dsn="./cb_2016_us_state_500k/cb_2016_us_state_500k.shp",
layer = "cb_2016_us_state_500k",verbose = FALSE)
#from: https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
leaflet() %>%
addTiles() %>%
leaflet() %>%
addTiles()
runApp('app_state.R')
leaflet(data=dtplot()$ct,options = leafletOptions(minZoom = 3.5, maxZoom = 8)) %>%
addTiles()
dtplot
dtplot()
dtplot()
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
library(shiny); runApp('app_state.R')
x()
dtplot()$rt
dtplot()$rt$rate
x()
input$var
runApp('app_state.R')
x()
pall
pall(0.1174527)
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
runApp('app_state.R')
county_full2$STATEFP
library(shiny); runApp('app_state.R')
library(shiny); runApp('app_exempt.R')
getwd("/Users/zilu/Desktop/leaflet-map")
setwd("/Users/zilu/Desktop/leaflet-map")
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv")
View(prem)
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv") %>% select(statecode,ratingarea,income)
View(drg)
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(raingarea,3,4))))
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4))))
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(rating_area,income)
rating_area2 <- add_metrics(rating_area2,prem,"income")
newname <- "income"
source <- prem
source <- source %>% filter(newvar==newname)
View(drg)
call <- as.character(rating_area2$name)
call
drg$ratingarea
call
prem$income[order(match(prem$rating_area,call))]
prem$income[order(match(prem$ratingarea,call))]
load("hhi.drg.full2.rda")
drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
cons <- data.table(drg)
cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
cons
drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
source$hhi[order(match(source$ratingarea,call))]
source <- drg %>% filter(newvar=="hix_2014")
source
source$hhi[order(match(source$ratingarea,call))]
call
call
call[1:5]
View(source)
match(source$ratingarea,call)
source$rating_area,call)
source$rating_area,call)
match(source$rating_area,call)
match(source$ratingarea,call)
source$hhi[order(match(source$rating_area,call))]
View(source)
View(prem)
match(prem$rating_area,call)
prem$income[order(match(prem$rating_area,call))]
View(prem)
call[1:10]
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv")
table(prem$statecode)
call[1:20]
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(rating_area,income)
call
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(rating_area,income) %>% right_join(data.frame(rating_area=call))
View(prem)
rating_area2$income40 <-  prem$income[order(match(prem$rating_area,call))]
prem <- read.csv("CCIIO_2017_40yroldrapremiums.csv")
table(prem$statecode)
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
View(prem)
names(prem)
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call))
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
library(leaflet)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgeos)
library(reshape2)
library(dplyr)
rm(list=ls())
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
trans <- function(dt,type) {
# convert it to Albers equal area
us_aea <- spTransform(dt, CRS("+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs"))
us_aea@data$id <- rownames(us_aea@data)
###rules to filter states
if(type=="rating") {
alaska <- us_aea[grepl("AK_*",us_aea$name),]
hawaii <- us_aea[grepl("HI_*",us_aea$name),]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-1870000, -2500000))
} else if (type=="county") {
alaska <- us_aea[us_aea$STATEFP=="02",]
hawaii <- us_aea[us_aea$STATEFP=="15",]
alaska <- elide(alaska, rotate=-50)
alaska <- elide(alaska, scale=max(apply(bbox(alaska), 1, diff)) / 2.3)
alaska <- elide(alaska, shift=c(-2100000, -2500000))
} else stop("type error")
# extract, then rotate, shrink & move alaska (and reset projection)
proj4string(alaska) <- proj4string(us_aea)
# extract, then rotate & shift hawaii
hawaii <- elide(hawaii, rotate=-35)
hawaii <- elide(hawaii, shift=c(5400000, -1400000))
proj4string(hawaii) <- proj4string(us_aea)
if(type=="rating") {
us_aea <- us_aea[!grepl("AK_*",us_aea$name) & !grepl("HI_*",us_aea$name),]
} else if (type=="county") {
us_aea <- us_aea[!us_aea$STATEFP %in% c("02", "15", "72"),]
} else stop("type error")
us_aea <- rbind(us_aea, alaska, hawaii)
# remove old states and put new ones back in; note the different order
# we're also removing puerto rico in this example but you can move it
# between texas and florida via similar methods to the ones we just used
us_aea2 <- spTransform(us_aea, proj4string(dt))
return(us_aea2)
}
##1.rating area map from NYT
rating_area <- readOGR(dsn="./output/ratingAreas.shp",
layer = "ratingAreas",verbose = FALSE)
#made up data
#rating_area$rate <- sample(1:10000,499)
#rating_area$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
#rating_area$lng <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[1]))
#rating_area$lat <- unlist(lapply(rating_area@polygons, function(dt) dt@labpt[2]))
rating_area2 <- trans(rating_area,type="rating")
#made up data
rating_area2$rate <- sample(1:10000,499)
rating_area2$var2 <- sample(1:5,499,replace = TRUE)
#static label needs location point
rating_area2$lng <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[1]))
rating_area2$lat <- unlist(lapply(rating_area2@polygons, function(dt) dt@labpt[2]))
##2.all county file from http://eric.clst.org/Stuff/USGeoJSON
#county_full <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
county_full <- readOGR(dsn="./cb_2016_us_county_20m/cb_2016_us_county_20m.shp",
layer = "cb_2016_us_county_20m",verbose = FALSE)
#county_full <- county_full[!county_full$STATEFP !="72",]
#county_full$lng <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[1]))
#county_full$lat <- unlist(lapply(county_full@polygons, function(dt) dt@labpt[2]))
county_full2 <- trans(county_full,type="county")
county_full2$lng <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[1]))
county_full2$lat <- unlist(lapply(county_full2@polygons, function(dt) dt@labpt[2]))
###
pall <- colorNumeric("viridis", NULL)
library(dplyr)
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(as.numeric(STATE) < 60)
##add hhi test
#issues: map does not have PR, GU
#Idaho only has 6 rating areas now, go back to old data (7 RA)
#load("hhi1.rda")
#test <- hhi1 %>% filter(!(state %in% c("PR","GU")))
#call <- as.character(rating_area2$name)
#rating_area2$hhi <- test$hhi[order(match(test$ratingarea,call))]
call <- as.character(rating_area2$name)
# load("hhi.drg.full2.rda")
# drg <- drg %>% filter(!(state %in% c("PR","GU"))) %>% mutate(market=gsub("_0","",market))
# #fill in 0 cell
# library(data.table)
# cons <- data.table(drg)
# cons <- cons[ ,list(rating_area=call),by=c("market","year")] %>% data.frame()
# drg <- drg %>% full_join(cons,by=c("market","year","rating_area")) %>% mutate(newvar=paste0(market,"_",year))
#
# add_metrics <- function(target,source,newname) {
#   source <- source %>% filter(newvar==newname)
#   target$new <-  source$hhi[order(match(source$rating_area,call))]
#   names(target)[names(target)=="new"] <- newname
#   return(target)
# }
#
# for(i in unique(drg$newvar)) {
#   rating_area2 <- add_metrics(rating_area2,drg,i)
# }
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode)
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% full_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
View(prem)
names(prem)
names(prem)[-"rating_area"]
names(prem)[-"rating_area",]
names(prem)[names(prem)!="rating_area"]
prem["rating_area"]
prem[c("rating_area","X40")]
source <- prem
varname <_ "X40"
varname <- "X40"
source[varname][order(match(source$rating_area,call))]
source[varname]
order(match(source$rating_area,call))
source[varname][order(match(source$rating_area,call))]
(source[varname])[order(match(source$rating_area,call))]
inc <- source[varname]
target$new <-  inc[order(match(source$rating_area,call))]
inc
order(match(source$rating_area,call))
names(source)[names(source)==varname] <- "inc"
names(source)
source$inc[order(match(source$rating_area,call))]
names(source)[names(source)==varname] <- "inc"
target$inc <-  source$inc[order(match(source$rating_area,call))]
names(target)[names(target)=="inc"] <- paste0("Age",varname)
grp
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
rating_area2$income40 <-  prem$income[order(match(prem$rating_area,call))]
add_metrics <- function(target,source,varname) {
names(source)[names(source)==varname] <- "inc"
target$inc <-  source$inc[order(match(source$rating_area,call))]
names(target)[names(target)=="inc"] <- paste0("Age",varname)
return(target)
}
grp <- names(prem)[names(prem)!="rating_area"]
for(i in grp) {
rating_area2 <- add_metrics(rating_area2,drg,i)
}
for(i in grp) {
rating_area2 <- add_metrics(rating_area2,prem,i)
}
paste0("Age_",grp)
paste0("Age",grp)
list("None"="None",paste0("Min Exempt Income for Age",grp)=grp)
View(prem)
library(shiny); runApp('app_exempt.R')
runApp('app_exempt.R')
library(shiny); runApp('app_exempt.R')
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
View(prem)
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv") %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem)[names(prem)=="X0.20"] <- "X20"
View(prem)
dcast(prem)
runApp('app_exempt.R')
rating_area2$name
leaflet(data=rating_area2) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity =0.5, fillColor = ~pall(x()),
label=~as.character(name),labelOptions=labelOptions(clickable=TRUE, direction = 'top', textOnly = TRUE),
group="rating_area")
runApp('app_exempt.R')
v <- prem$AgeX40[order(match(prem$rating_area,call))]
v
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
View(states)
View(prem)
View(states)
prem <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(prem$statecode))
View(states)
runApp('app_exempt.R')
View(prem)
raw <- read.csv("CCIIO_2017_ra-threshold-income-by-age.csv")
#filter out states not in datasets
states <- read.delim("state.txt",header=TRUE,sep="|",colClasses="character") %>% filter(STUSAB %in% unique(prem$statecode))
prem <- raw %>%
mutate(rating_area=paste0(statecode,"_",as.integer(substr(ratingarea,3,4)))) %>%
select(-ratingarea,-statecode) %>% right_join(data.frame(rating_area=call,stringsAsFactors=FALSE))
names(prem)[names(prem)=="X0.20"] <- "X20"
View(raw)
melt(raw)
tb <- melt(raw) %>% mutate(
state=statecode,
age=gsub("X",variable,""),
rating_area=substr(ratingarea,3,4),
exempt.income=value
)
tb <- melt(raw) %>% mutate(
state=statecode,
age=gsub("X","",variable),
rating_area=substr(ratingarea,3,4),
exempt.income=value
)
View(tb)
runApp('app_exempt.R')
View(states)
runApp('app_exempt.R')
library(shiny); runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
pall
runApp('app_exempt.R')
runApp('app_exempt.R')
pall(prem$X20)
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
rating_area2$AgeX64
runApp('app_exempt.R')
runApp('app_hhi1.R')
unique(drg$newvar)
runApp('app_hhi1.R')
runApp('app_exempt.R')
runApp('app_exempt.R')
runApp('app_hhi1.R')
library(shiny); runApp('app_exempt.R')
